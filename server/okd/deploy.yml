apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: back-end-deploy-template
labels:
  app: ${APP_NAME}-${OKD_APP_ID}
objects:
  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
      labels:
        # Recommended Openshift labels: https://github.com/redhat-developer/app-labels/blob/master/labels-annotation-for-openshift.adoc
        app.kubernetes.io/name: ${APP_NAME}-${BACKEND_MODULE}
        app.kubernetes.io/instance: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
        app.kubernetes.io/component: backend
        # Topology view: Visual grouping. User defined value for the group
        app.kubernetes.io/part-of: ${APP_NAME}
        # Topology view: Icon based on predefined OKD icons set https://rawgit.com/openshift/openshift-logos-icon/master/demo.html
        app.openshift.io/runtime: spring
      annotations:
        # Topology view: Link to the git server
        app.openshift.io/vcs-uri: git://bitbucket.svc.elca.ch/projects/ELCAMULAB/repos/${APP_NAME}
    spec:
      replicas: 1
      strategy:
        type: Recreate
      template:
        metadata:
          labels:
            app: ${APP_NAME}-${OKD_APP_ID}
            name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
          # Used to modify YAML and force an OKD redeployment
          annotations:
            date: ${FORMATTED_DATE}
        spec:
          containers:
            - name: ${APP_NAME}-${BACKEND_MODULE}-${FORMATTED_DATE}
              image: ${OKD_NAMESPACE}-docker.artifactory.svc.elca.ch/${APP_NAME}/${BACKEND_MODULE}:${VERSION}
              ports:
                - containerPort: 8080
                  protocol: TCP
              envFrom:
                - configMapRef:
                    name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
                - secretRef:
                    name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
              imagePullPolicy: Always
              resources:
                limits:
                  cpu: 500m
                  memory: 2Gi
                requests:
                  cpu: 100m
                  memory: 512Mi
              # Checks if the application within the container is started. If the startup probe fails the container is killed
              startupProbe:
                failureThreshold: 30
                httpGet:
                  path: /actuator/health
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 20
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              # Checks if the container is ready to handle requests. A failed readiness probe means that a container should not receive any traffic even if it's running.
              readinessProbe:
                failureThreshold: 30
                httpGet:
                  path: /actuator/health
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              # Checks if the Container is still running. If the liveness probe fails the Container is killed
              livenessProbe:
                failureThreshold: 4
                httpGet:
                  path: /actuator/health
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
  - apiVersion: v1
    kind: Service
    metadata:
      # DNS name to use to connect from other pods
      name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
      labels:
        name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
    spec:
      ports:
        - name: http
          port: 8080
      selector:
        # Refer to kind: DeploymentConfig > spec > template > metadata > labels
        name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
  - apiVersion: v1
    kind: Route
    metadata:
      name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
    spec:
      host: ${BACKEND_HOST}
      to:
        kind: Service
        # Refer to kind: DeploymentConfig > spec > template > metadata > labels
        name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
      port:
        targetPort: http
  - apiVersion: monitoring.coreos.com/v1
    kind: ServiceMonitor
    metadata:
      name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
    spec:
      endpoints:
        - interval: 30s
          port: http
          scheme: http
          path: /actuator/prometheus
      selector:
        matchLabels:
          # Refer to kind: DeploymentConfig > metadata > labels
          app: ${APP_NAME}
          name: ${APP_NAME}-${BACKEND_MODULE}-${OKD_APP_ID}
parameters:
  - description: Application name
    name: APP_NAME
  - description: Backend module name
    name: BACKEND_MODULE
  - description: Backend host
    name: BACKEND_HOST
  - description: Formatted date
    name: FORMATTED_DATE
  - name: OKD_APP_ID
  - name: OKD_NAMESPACE
  - description: Version
    name: VERSION